{"name":"Ender","tagline":"Descriptor library","body":"What is it?\r\n===========\r\nEnder is library written in C that describes other libraries. The purpose of Ender is to easily create bindings for any C library without\r\nmuch struggling.\r\n\r\nHow?\r\n====\r\nEnder uses an intermediary XML format to describe your library, loads it and registers every definition of your library.\r\nFor example, for a C library defined like this:\r\n\r\n```c\r\n/* contents of foo.h */\r\ntypedef struct _Foo_S1 {\r\n  int i;\r\n  char *s;\r\n} Foo_S1;\r\n\r\nint foo_s1_has_i(Foo_S1 *thiz);\r\n```\r\n\r\nAnd the corresponding XML's Ender file foo.ender:\r\n\r\n```xml\r\n<?xml version=\"1.0\" standalone=\"yes\"?>\r\n<lib name=\"foo\" version=\"0\" case=\"underscore\">\r\n  <!-- Define the struct -->\r\n  <struct name=\"foo.s1\">\r\n    <!-- Now the fields -->\r\n    <field name=\"i\" type=\"i32\"/>\r\n    <field name=\"s\" type=\"string\"/>\r\n    <!-- A method always receives the struct/object as its first argument -->\r\n    <method name=\"has_i\">\r\n      <return type=\"i32\" transfer=\"full\"/>\r\n    </mthod>\r\n  </struct>\r\n</lib>\r\n```\r\n\r\nFor some big libraries, it might be tedious to do the XML file manually, for that, there is an automatic generator from doxygen\r\ndocumentation.\r\n\r\nAvailable bindings\r\n==================\r\nThere are several projects for creating bindings of ender to specific languages. Several are still in deveolping tho\r\n\r\n+ [Neko](http://github.com/turran/ender-neko)\r\n+ [JavaScript (SpiderMonkey)](http://github.com/turran/ender-js-sm)\r\n+ [JavaScript (V8)](http://github.com/turran/ender-js-v8)\r\n+ [Lua](http://github.com/turran/ender-lua)\r\n\r\nFAQ\r\n===\r\n+ Is ender an OO for C? No, it is not. It lets you describe a library that uses any OO system for C (GLib, EO, Enesim Object, your own custom, etc)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}