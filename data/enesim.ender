namespace "enesim" {
	abstract "renderer" {
		matrix transformation;
		double x_origin;
		double y_origin;
		argb color;
		int rop;
	};
};

namespace "enesim.renderer" {
	abstract "shape" : "renderer" {
		double outline_weight;
		argb outline_color;
		argb fill_color;
		renderer fill_renderer;
		int draw_mode;
	};

	class "rectangle" : "shape" {
		uint width;
		uint height;
		double corner_radius;
		int top_left_corner;
		int top_right_corner;
		int bottom_left_corner;
		int bottom_right_corner;
	};

	class "circle" : "shape" {
		double x;
		double y;
		double radius;
	};

	class "ellipse" : "shape" {
		double x;
		double y;
		double x_radius;
		double y_radius;
	};

	struct "point" {
		double, double
	};

	class "figure" : "shape" {
		[[point]] polygon;
	};

	class "checker" : "renderer" {
		uint width;
		uint height;
		argb even_color;
		argb odd_color;
	};

	class "image" : "renderer" {
		surface src;
		int x;
		int y;
		int w;
		int h;
	};

	class "dispmap" : "renderer" {
		surface map;
		surface src;
		int x_channel;
		int y_channel;
		double factor;
	};

	class "grid" : "renderer" {
		uint inside_width;
		uint inside_height;
		argb inside_color;
		uint border_vthickness;
		uint border_hthickness;
		argb border_color;
	};

	class "perlin" : "renderer" {
		uint octaves;
		double persistence;
		double xfrequency;
		double yfrequency;
	};

	class "raddist" : "renderer" {
		surface src;
		uint x;
		uint y;
		double radius;
		double factor;
	};

	class "stripes" : "renderer" {
		double even_thickness;
		argb even_color;
		double odd_thickness;
		argb odd_color;
	};

	class "compound" : "renderer" {
		[renderer] layer;
	};

	struct "stop" {
		argb, double
	};

	abstract "gradient" : "renderer" {
		[stop] stop;
	};

	class "gradient_linear" : "gradient" {
		double x0;
		double y0;
		double x1;
		double y1;
	};

	class "background" : "renderer" {
		argb color;
	};

	class "transition" : "renderer" {
		double level;
		renderer source;
		renderer target;
	};

	class "clipper" : "renderer" {
		double width;
		double height;
		renderer content;
	};
};
